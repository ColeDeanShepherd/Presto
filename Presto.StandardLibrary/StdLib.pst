no_op = fn (): Nothing -> {}
ignore = fn [T] (x: T): Nothing -> {}
identity = fn [T] (x: T): T -> x
#default = fn [T] (): T -> BUILT_IN

##### Boolean #####
Bool = union {
    True
    False
}

not = fn (x: Bool): Bool -> if x then False else True
logical_and = fn (a: Bool, b: Bool): Bool = a && b
logical_or = fn (a: Bool, b: Bool): Bool = a || b
logical_xor = fn (a: Bool, b: Bool): Bool = BUILT_IN
logical_nand = fn (a: Bool, b: Bool): Bool = BUILT_IN
logical_nor = fn (a: Bool, b: Bool): Bool = BUILT_IN
logical_not = fn (a: Bool, b: Bool): Bool = BUILT_IN
logical_xnor = fn (a: Bool, b: Bool): Bool = BUILT_IN








eq = fn [T] (a: T, b: T): Bool -> impl_in_CSharp[Bool]()
not_eq = fn [T] (a: T, b: T): Bool -> not(eq(a, b))

to_text = fn [T] (x: T): Text -> impl_in_CSharp[Text]()





##### Natural Numbers & Reals #####
sum = fn (a: Nat, b: Nat): Nat -> impl_in_CSharp[Nat]()
difference = fn (a: Nat, b: Nat): Nat -> impl_in_CSharp[Nat]()
product = fn (a: Nat, b: Nat): Nat -> impl_in_CSharp[Nat]()
quotient = fn (a: Nat, b: Nat): Nat -> impl_in_CSharp[Nat]()
# modulus
# remainder
# power
# floor
# ceiling
# is_even
# is_odd
# is_divisble_by
# lcd
# gcd
# abs
# sin
# cos
# tan
# asin
# acos
# atan
# atan2
# sinh
# cosh
# tanh
# asinh
# acosh
# atanh
# clamp
# divrem
# exp
# log
# log2
# log10
#round = fn [T] (x: T, digits: Nat): T -> impl_in_CSharp[T]()
round = fn (x: Real, digits: Nat): Real -> impl_in_CSharp[Real]()
# sign
# sqrt
# truncate

##### Comparable #####
min = fn (xs: Seq[Real]): Real -> impl_in_CSharp[Real]()
max = fn (xs: Seq[Real]): Real -> impl_in_CSharp[Real]()
mean = fn (xs: Seq[Real]): Real -> impl_in_CSharp[Real]()
#min = fn [T] (xs: Seq[T]): T -> impl_in_CSharp[T]()
#max = fn [T] (xs: Seq[T]): T -> impl_in_CSharp[T]()
#mean = fn [T] (xs: Seq[T]): T -> impl_in_CSharp[T]()

##### Char #####
# is_ascii
# is_digit
# is_alpha
# is_whitespace
# is_lower
# is_upper
# to_lower
# to_upper

##### String #####
length = fn (x: Text): Nat -> impl_in_CSharp[Nat]()
concatenate = fn (a: Text, b: Text): Text -> a + b
# contains
# starts_with
# ends_with
# first_index_of
# last_index_of
# pad_left
# pad_right
# insert
# remove
# replace
# split
uppercase = fn (x: Text): Text -> impl_in_CSharp[Text]()
# to_lower
# trim
# trim_start
# trim_end
parse_real = fn (x: Text): Result[Real, Text] -> impl_in_CSharp[Result[Real, Text]]()
get_lines = fn (x: Seq[Char]): Seq[Text] -> impl_in_CSharp[Seq[Text]]()
split_by = fn (x: Text, separator: Text): Seq[Text] -> impl_in_CSharp[Seq[Text]]()

##### List/Seq #####
Seq = trait [T] {
    list_1st = fn (x: Self): T
    list_2nd = fn (x: Self): T
    last_or_default = fn (x: Self, _default: T): T
}

# head
# tail
# last

##### Tuple #####
_1st = fn [T1, T2] (x: (T1, T2)): T1 -> impl_in_CSharp[T1]()
_2nd = fn [T1, T2] (x: (T1, T2)): T2 -> impl_in_CSharp[T2]()
t4_1st = fn [T1, T2, T3, T4] (x: (T1, T2, T3, T4)): T1 -> impl_in_CSharp[T1]()
t4_2nd = fn [T1, T2, T3, T4] (x: (T1, T2, T3, T4)): T2 -> impl_in_CSharp[T2]()
t4_3rd = fn [T1, T2, T3, T4] (x: (T1, T2, T3, T4)): T3 -> impl_in_CSharp[T3]()
t4_4th = fn [T1, T2, T3, T4] (x: (T1, T2, T3, T4)): T4 -> impl_in_CSharp[T4]()

##### Grouping #####
Grouping = record [TKey, T] {
    key: TKey
    values: Seq[T]
}

key = fn [TKey, T] (x: Grouping[TKey, T]): TKey -> impl_in_CSharp[TKey]()
values = fn [TKey, T] (x: Grouping[TKey, T]): Seq[T] -> impl_in_CSharp[Seq[T]]()

##### Result #####
#Result = union [T, E] {
#    Ok(value: T)
#    Err(error: E)
#}
unwrap = fn [T, E] (x: Result[T, E]): T -> impl_in_CSharp[T]()

##### Higher-order Functions #####
for_each = fn [TIn, TOut] (x: Seq[TIn], f: fn (x: TIn): TOut): Nothing -> impl_in_CSharp[Nothing]()
map = fn [TIn, TOut] (x: Seq[TIn], f: fn (x: TIn): TOut): Seq[TOut] -> impl_in_CSharp[Seq[TOut]]()
sort_by = fn [T, TSortKey] (x: Seq[T], f: fn (x: T): TSortKey): Seq[T] -> impl_in_CSharp[Seq[T]]()
group_by = fn [TKey, T, TFinal] (x: Seq[T], key_selector: fn (x: T): TKey, element_selector: fn (x: T): TFinal): Seq[Grouping[TKey, TFinal]] -> impl_in_CSharp[Seq[Grouping[TKey, TFinal]]]()

##### Console #####
Console = trait {
    read_line = fn (console: Self): Result[Text, Text]
    print = fn (console: Self, text: Text): Result[Nothing, Text]
}

read_real = fn (console: Console): Result[Real, Text] -> impl_in_CSharp[Result[Real, Text]]()
print_line = fn (console: Console, text: Text): Result[Nothing, Text] -> impl_in_CSharp[Result[Nothing, Text]]()

##### File System #####
FileSystem = trait {
    read_text_file = fn (file_system: Self, file_path: Text): Result[Seq[Char], Text]
}

##### Desktop Environment #####
DesktopEnv = trait {
    open_URL_in_browser = fn (desktop_env: Self, URL: Text): Result[Nothing, Text]
}